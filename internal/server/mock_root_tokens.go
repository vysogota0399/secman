// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/server (interfaces: IRootTokens)

// package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRootTokens is a mock of IRootTokens interface.
type MockIRootTokens struct {
	ctrl     *gomock.Controller
	recorder *MockIRootTokensMockRecorder
}

// MockIRootTokensMockRecorder is the mock recorder for MockIRootTokens.
type MockIRootTokensMockRecorder struct {
	mock *MockIRootTokens
}

// NewMockIRootTokens creates a new mock instance.
func NewMockIRootTokens(ctrl *gomock.Controller) *MockIRootTokens {
	mock := &MockIRootTokens{ctrl: ctrl}
	mock.recorder = &MockIRootTokensMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRootTokens) EXPECT() *MockIRootTokensMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockIRootTokens) Compare(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockIRootTokensMockRecorder) Compare(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockIRootTokens)(nil).Compare), arg0, arg1, arg2)
}

// Gen mocks base method.
func (m *MockIRootTokens) Gen(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gen", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gen indicates an expected call of Gen.
func (mr *MockIRootTokensMockRecorder) Gen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gen", reflect.TypeOf((*MockIRootTokens)(nil).Gen), arg0, arg1)
}
