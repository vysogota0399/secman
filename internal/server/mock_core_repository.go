// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/server (interfaces: ICoreRepository)

// package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICoreRepository is a mock of ICoreRepository interface.
type MockICoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICoreRepositoryMockRecorder
}

// MockICoreRepositoryMockRecorder is the mock recorder for MockICoreRepository.
type MockICoreRepositoryMockRecorder struct {
	mock *MockICoreRepository
}

// NewMockICoreRepository creates a new mock instance.
func NewMockICoreRepository(ctrl *gomock.Controller) *MockICoreRepository {
	mock := &MockICoreRepository{ctrl: ctrl}
	mock.recorder = &MockICoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICoreRepository) EXPECT() *MockICoreRepositoryMockRecorder {
	return m.recorder
}

// GetCoreAuthConfig mocks base method.
func (m *MockICoreRepository) GetCoreAuthConfig(arg0 context.Context) (*Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreAuthConfig", arg0)
	ret0, _ := ret[0].(*Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreAuthConfig indicates an expected call of GetCoreAuthConfig.
func (mr *MockICoreRepositoryMockRecorder) GetCoreAuthConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreAuthConfig", reflect.TypeOf((*MockICoreRepository)(nil).GetCoreAuthConfig), arg0)
}

// IsCoreInitialized mocks base method.
func (m *MockICoreRepository) IsCoreInitialized(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCoreInitialized", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCoreInitialized indicates an expected call of IsCoreInitialized.
func (mr *MockICoreRepositoryMockRecorder) IsCoreInitialized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCoreInitialized", reflect.TypeOf((*MockICoreRepository)(nil).IsCoreInitialized), arg0)
}

// SetCoreInitialized mocks base method.
func (m *MockICoreRepository) SetCoreInitialized(arg0 context.Context, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCoreInitialized", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCoreInitialized indicates an expected call of SetCoreInitialized.
func (mr *MockICoreRepositoryMockRecorder) SetCoreInitialized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCoreInitialized", reflect.TypeOf((*MockICoreRepository)(nil).SetCoreInitialized), arg0, arg1)
}

// UpdateCoreAuthConfig mocks base method.
func (m *MockICoreRepository) UpdateCoreAuthConfig(arg0 context.Context, arg1 *Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoreAuthConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoreAuthConfig indicates an expected call of UpdateCoreAuthConfig.
func (mr *MockICoreRepositoryMockRecorder) UpdateCoreAuthConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoreAuthConfig", reflect.TypeOf((*MockICoreRepository)(nil).UpdateCoreAuthConfig), arg0, arg1)
}
