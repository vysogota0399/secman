// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/engines/logopass (interfaces: ParamsRepository)

// Package logopass is a generated GoMock package.
package logopass

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repositories "github.com/vysogota0399/secman/internal/server/engines/logopass/repositories"
)

// MockParamsRepository is a mock of ParamsRepository interface.
type MockParamsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParamsRepositoryMockRecorder
}

// MockParamsRepositoryMockRecorder is the mock recorder for MockParamsRepository.
type MockParamsRepositoryMockRecorder struct {
	mock *MockParamsRepository
}

// NewMockParamsRepository creates a new mock instance.
func NewMockParamsRepository(ctrl *gomock.Controller) *MockParamsRepository {
	mock := &MockParamsRepository{ctrl: ctrl}
	mock.recorder = &MockParamsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamsRepository) EXPECT() *MockParamsRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockParamsRepository) Get(arg0 context.Context) (*repositories.Params, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*repositories.Params)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockParamsRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParamsRepository)(nil).Get), arg0)
}

// IsExist mocks base method.
func (m *MockParamsRepository) IsExist(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockParamsRepositoryMockRecorder) IsExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockParamsRepository)(nil).IsExist), arg0)
}

// Update mocks base method.
func (m *MockParamsRepository) Update(arg0 context.Context, arg1 *repositories.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockParamsRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockParamsRepository)(nil).Update), arg0, arg1)
}
