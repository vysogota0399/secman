// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/engines/logopass (interfaces: IamAdapter)

// Package logopass is a generated GoMock package.
package logopass

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repositories "github.com/vysogota0399/secman/internal/server/iam/repositories"
)

// MockIamAdapter is a mock of IamAdapter interface.
type MockIamAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockIamAdapterMockRecorder
}

// MockIamAdapterMockRecorder is the mock recorder for MockIamAdapter.
type MockIamAdapterMockRecorder struct {
	mock *MockIamAdapter
}

// NewMockIamAdapter creates a new mock instance.
func NewMockIamAdapter(ctrl *gomock.Controller) *MockIamAdapter {
	mock := &MockIamAdapter{ctrl: ctrl}
	mock.recorder = &MockIamAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIamAdapter) EXPECT() *MockIamAdapterMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockIamAdapter) Authorize(arg0 context.Context, arg1 string) (repositories.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1)
	ret0, _ := ret[0].(repositories.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockIamAdapterMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockIamAdapter)(nil).Authorize), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockIamAdapter) GetUser(arg0 context.Context, arg1 string) (repositories.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(repositories.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIamAdapterMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIamAdapter)(nil).GetUser), arg0, arg1)
}

// Login mocks base method.
func (m *MockIamAdapter) Login(arg0 context.Context, arg1 repositories.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockIamAdapterMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIamAdapter)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockIamAdapter) Register(arg0 context.Context, arg1 repositories.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockIamAdapterMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIamAdapter)(nil).Register), arg0, arg1)
}
