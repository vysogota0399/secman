// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/cli (interfaces: ISession)

// Package mocks is a generated GoMock package.
package cli

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISession is a mock of ISession interface.
type MockISession struct {
	ctrl     *gomock.Controller
	recorder *MockISessionMockRecorder
}

// MockISessionMockRecorder is the mock recorder for MockISession.
type MockISessionMockRecorder struct {
	mock *MockISession
}

// NewMockISession creates a new mock instance.
func NewMockISession(ctrl *gomock.Controller) *MockISession {
	mock := &MockISession{ctrl: ctrl}
	mock.recorder = &MockISessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISession) EXPECT() *MockISessionMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockISession) Authenticate(arg0 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockISessionMockRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockISession)(nil).Authenticate), arg0)
}

// Clear mocks base method.
func (m *MockISession) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockISessionMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockISession)(nil).Clear))
}

// Get mocks base method.
func (m *MockISession) Get(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockISessionMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockISession)(nil).Get), arg0)
}

// GetAuthProvider mocks base method.
func (m *MockISession) GetAuthProvider(arg0 string) AuthProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthProvider", arg0)
	ret0, _ := ret[0].(AuthProvider)
	return ret0
}

// GetAuthProvider indicates an expected call of GetAuthProvider.
func (mr *MockISessionMockRecorder) GetAuthProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthProvider", reflect.TypeOf((*MockISession)(nil).GetAuthProvider), arg0)
}

// GetSecrets mocks base method.
func (m *MockISession) GetSecrets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockISessionMockRecorder) GetSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockISession)(nil).GetSecrets))
}

// Init mocks base method.
func (m *MockISession) Init(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockISessionMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISession)(nil).Init), arg0)
}

// Login mocks base method.
func (m *MockISession) Login(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", arg0, arg1)
}

// Login indicates an expected call of Login.
func (mr *MockISessionMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockISession)(nil).Login), arg0, arg1)
}

// Persist mocks base method.
func (m *MockISession) Persist() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist")
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockISessionMockRecorder) Persist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockISession)(nil).Persist))
}

// Set mocks base method.
func (m *MockISession) Set(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockISessionMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockISession)(nil).Set), arg0, arg1)
}
