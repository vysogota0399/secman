// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/cli (interfaces: ICommand)

// Package cli is a generated GoMock package.
package cli

import (
	context "context"
	reflect "reflect"
	strings "strings"

	gomock "github.com/golang/mock/gomock"
)

// MockICommand is a mock of ICommand interface.
type MockICommand struct {
	ctrl     *gomock.Controller
	recorder *MockICommandMockRecorder
}

// MockICommandMockRecorder is the mock recorder for MockICommand.
type MockICommandMockRecorder struct {
	mock *MockICommand
}

// NewMockICommand creates a new mock instance.
func NewMockICommand(ctrl *gomock.Controller) *MockICommand {
	mock := &MockICommand{ctrl: ctrl}
	mock.recorder = &MockICommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommand) EXPECT() *MockICommandMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockICommand) Handle(arg0 context.Context, arg1 *strings.Builder, arg2 *Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockICommandMockRecorder) Handle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockICommand)(nil).Handle), arg0, arg1, arg2)
}

// Info mocks base method.
func (m *MockICommand) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockICommandMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockICommand)(nil).Info))
}

// Parse mocks base method.
func (m *MockICommand) Parse(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockICommandMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockICommand)(nil).Parse), arg0)
}
