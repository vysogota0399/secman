// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/secman (interfaces: IAuth)

// Package secman is a generated GoMock package.
package secman

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIAuth is a mock of IAuth interface.
type MockIAuth struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthMockRecorder
}

// MockIAuthMockRecorder is the mock recorder for MockIAuth.
type MockIAuthMockRecorder struct {
	mock *MockIAuth
}

// NewMockIAuth creates a new mock instance.
func NewMockIAuth(ctrl *gomock.Controller) *MockIAuth {
	mock := &MockIAuth{ctrl: ctrl}
	mock.recorder = &MockIAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuth) EXPECT() *MockIAuthMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockIAuth) Authorize(arg0 *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockIAuthMockRecorder) Authorize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockIAuth)(nil).Authorize), arg0)
}

// EnableEngine mocks base method.
func (m *MockIAuth) EnableEngine(arg0 context.Context, arg1 LogicalBackend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableEngine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableEngine indicates an expected call of EnableEngine.
func (mr *MockIAuthMockRecorder) EnableEngine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableEngine", reflect.TypeOf((*MockIAuth)(nil).EnableEngine), arg0, arg1)
}

// PostUnseal mocks base method.
func (m *MockIAuth) PostUnseal(arg0 context.Context, arg1 ILogicalRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUnseal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUnseal indicates an expected call of PostUnseal.
func (mr *MockIAuthMockRecorder) PostUnseal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUnseal", reflect.TypeOf((*MockIAuth)(nil).PostUnseal), arg0, arg1)
}
