// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/secman/iam (interfaces: UsersRepository)

// Package iam is a generated GoMock package.
package iam

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repositories "github.com/vysogota0399/secman/internal/secman/iam/repositories"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUsersRepository) Get(arg0 context.Context, arg1 string) (repositories.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(repositories.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersRepository)(nil).Get), arg0, arg1)
}

// GetOk mocks base method.
func (m *MockUsersRepository) GetOk(arg0 context.Context, arg1 string) (repositories.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOk", arg0, arg1)
	ret0, _ := ret[0].(repositories.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOk indicates an expected call of GetOk.
func (mr *MockUsersRepositoryMockRecorder) GetOk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOk", reflect.TypeOf((*MockUsersRepository)(nil).GetOk), arg0, arg1)
}

// Update mocks base method.
func (m *MockUsersRepository) Update(arg0 context.Context, arg1 *repositories.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepository)(nil).Update), arg0, arg1)
}
