// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/secman (interfaces: LogicalBackend)

// Package secman is a generated GoMock package.
package secman

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogicalBackend is a mock of LogicalBackend interface.
type MockLogicalBackend struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalBackendMockRecorder
}

// MockLogicalBackendMockRecorder is the mock recorder for MockLogicalBackend.
type MockLogicalBackendMockRecorder struct {
	mock *MockLogicalBackend
}

// NewMockLogicalBackend creates a new mock instance.
func NewMockLogicalBackend(ctrl *gomock.Controller) *MockLogicalBackend {
	mock := &MockLogicalBackend{ctrl: ctrl}
	mock.recorder = &MockLogicalBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalBackend) EXPECT() *MockLogicalBackendMockRecorder {
	return m.recorder
}

// Enable mocks base method.
func (m *MockLogicalBackend) Enable(arg0 context.Context, arg1 *LogicalRequest) (*LogicalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0, arg1)
	ret0, _ := ret[0].(*LogicalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockLogicalBackendMockRecorder) Enable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockLogicalBackend)(nil).Enable), arg0, arg1)
}

// Help mocks base method.
func (m *MockLogicalBackend) Help() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Help")
	ret0, _ := ret[0].(string)
	return ret0
}

// Help indicates an expected call of Help.
func (mr *MockLogicalBackendMockRecorder) Help() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Help", reflect.TypeOf((*MockLogicalBackend)(nil).Help))
}

// Paths mocks base method.
func (m *MockLogicalBackend) Paths() map[string]map[string]*Path {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paths")
	ret0, _ := ret[0].(map[string]map[string]*Path)
	return ret0
}

// Paths indicates an expected call of Paths.
func (mr *MockLogicalBackendMockRecorder) Paths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockLogicalBackend)(nil).Paths))
}

// PostUnseal mocks base method.
func (m *MockLogicalBackend) PostUnseal(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUnseal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUnseal indicates an expected call of PostUnseal.
func (mr *MockLogicalBackendMockRecorder) PostUnseal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUnseal", reflect.TypeOf((*MockLogicalBackend)(nil).PostUnseal), arg0)
}

// RootPath mocks base method.
func (m *MockLogicalBackend) RootPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// RootPath indicates an expected call of RootPath.
func (mr *MockLogicalBackendMockRecorder) RootPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootPath", reflect.TypeOf((*MockLogicalBackend)(nil).RootPath))
}

// Router mocks base method.
func (m *MockLogicalBackend) Router() *BackendRouter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Router")
	ret0, _ := ret[0].(*BackendRouter)
	return ret0
}

// Router indicates an expected call of Router.
func (mr *MockLogicalBackendMockRecorder) Router() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Router", reflect.TypeOf((*MockLogicalBackend)(nil).Router))
}

// SetRouter mocks base method.
func (m *MockLogicalBackend) SetRouter(arg0 *BackendRouter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRouter", arg0)
}

// SetRouter indicates an expected call of SetRouter.
func (mr *MockLogicalBackendMockRecorder) SetRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRouter", reflect.TypeOf((*MockLogicalBackend)(nil).SetRouter), arg0)
}
