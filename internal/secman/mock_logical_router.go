// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/secman (interfaces: ILogicalRouter)

// Package secman is a generated GoMock package.
package secman

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockILogicalRouter is a mock of ILogicalRouter interface.
type MockILogicalRouter struct {
	ctrl     *gomock.Controller
	recorder *MockILogicalRouterMockRecorder
}

// MockILogicalRouterMockRecorder is the mock recorder for MockILogicalRouter.
type MockILogicalRouterMockRecorder struct {
	mock *MockILogicalRouter
}

// NewMockILogicalRouter creates a new mock instance.
func NewMockILogicalRouter(ctrl *gomock.Controller) *MockILogicalRouter {
	mock := &MockILogicalRouter{ctrl: ctrl}
	mock.recorder = &MockILogicalRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogicalRouter) EXPECT() *MockILogicalRouterMockRecorder {
	return m.recorder
}

// EnableEngine mocks base method.
func (m *MockILogicalRouter) EnableEngine(arg0 context.Context, arg1 LogicalBackend, arg2 *LogicalRequest) (*LogicalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableEngine", arg0, arg1, arg2)
	ret0, _ := ret[0].(*LogicalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableEngine indicates an expected call of EnableEngine.
func (mr *MockILogicalRouterMockRecorder) EnableEngine(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableEngine", reflect.TypeOf((*MockILogicalRouter)(nil).EnableEngine), arg0, arg1, arg2)
}

// PostUnsealEngines mocks base method.
func (m *MockILogicalRouter) PostUnsealEngines(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUnsealEngines", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostUnsealEngines indicates an expected call of PostUnsealEngines.
func (mr *MockILogicalRouterMockRecorder) PostUnsealEngines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUnsealEngines", reflect.TypeOf((*MockILogicalRouter)(nil).PostUnsealEngines), arg0)
}

// Register mocks base method.
func (m *MockILogicalRouter) Register(arg0 context.Context, arg1 LogicalBackend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockILogicalRouterMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockILogicalRouter)(nil).Register), arg0, arg1)
}

// Resolve mocks base method.
func (m *MockILogicalRouter) Resolve(arg0 string) (LogicalBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0)
	ret0, _ := ret[0].(LogicalBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockILogicalRouterMockRecorder) Resolve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockILogicalRouter)(nil).Resolve), arg0)
}
