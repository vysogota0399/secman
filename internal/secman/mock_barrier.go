// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/secman/internal/secman (interfaces: IBarrier)

// Package mocks is a generated GoMock package.
package secman

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIBarrier is a mock of IBarrier interface.
type MockIBarrier struct {
	ctrl     *gomock.Controller
	recorder *MockIBarrierMockRecorder
}

// MockIBarrierMockRecorder is the mock recorder for MockIBarrier.
type MockIBarrierMockRecorder struct {
	mock *MockIBarrier
}

// NewMockIBarrier creates a new mock instance.
func NewMockIBarrier(ctrl *gomock.Controller) *MockIBarrier {
	mock := &MockIBarrier{ctrl: ctrl}
	mock.recorder = &MockIBarrierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBarrier) EXPECT() *MockIBarrierMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIBarrier) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBarrierMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBarrier)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIBarrier) Get(arg0 context.Context, arg1 string) (Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBarrierMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBarrier)(nil).Get), arg0, arg1)
}

// GetOk mocks base method.
func (m *MockIBarrier) GetOk(arg0 context.Context, arg1 string) (Entry, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOk", arg0, arg1)
	ret0, _ := ret[0].(Entry)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOk indicates an expected call of GetOk.
func (mr *MockIBarrierMockRecorder) GetOk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOk", reflect.TypeOf((*MockIBarrier)(nil).GetOk), arg0, arg1)
}

// Info mocks base method.
func (m *MockIBarrier) Info() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(string)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockIBarrierMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockIBarrier)(nil).Info))
}

// Init mocks base method.
func (m *MockIBarrier) Init(arg0 context.Context) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockIBarrierMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIBarrier)(nil).Init), arg0)
}

// List mocks base method.
func (m *MockIBarrier) List(arg0 context.Context, arg1 string) ([]Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIBarrierMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIBarrier)(nil).List), arg0, arg1)
}

// Unseal mocks base method.
func (m *MockIBarrier) Unseal(arg0 context.Context, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unseal", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unseal indicates an expected call of Unseal.
func (mr *MockIBarrierMockRecorder) Unseal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unseal", reflect.TypeOf((*MockIBarrier)(nil).Unseal), arg0, arg1)
}

// Update mocks base method.
func (m *MockIBarrier) Update(arg0 context.Context, arg1 string, arg2 Entry, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIBarrierMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIBarrier)(nil).Update), arg0, arg1, arg2, arg3)
}
